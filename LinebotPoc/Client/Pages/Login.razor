@page "/Login/{linkToken?}"
@using LinebotPoc.Client.Providers;
@using LinebotPoc.Server.Common;
@using LinebotPoc.Shared;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Text.Json;
@inject LineBotApiClient LineBotApiClient

@if (LoginFail)
{
    <div class="alert alert-danger" role="alert">
        Wrong Login or Password
    </div>
}
@if (ShowBind)
{
    <a href="@BindUrl" class="btn btn-primary">點擊完成帳號綁定</a>
}
else
{


    <div class="login-page">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 offset-lg-1">
                    <h3 class="mb-3">登入</h3>
                    <div class="bg-white shadow rounded">
                        <EditForm Model="@Model" OnValidSubmit="@UserLogin">
                            <DataAnnotationsValidator />

                            <div class="row">
                                <div class="col-md-7 pe-0">
                                    <div class="form-left h-100 py-5 px-5  ">
                                        <div class="row g-4">
                                            <div class="col-12">
                                            <label for="txtLoginId" class="form-label">Login Email</label>
                                            <InputText id="txtLoginId" @bind-Value="Model.UserEmail" class="form-control" />

                                            <ValidationMessage For="() => Model.UserEmail" />
                                        </div>
                                        <div class="col-12 ">
                                            <a href="/Register/@LinkToken" class="float-end text-primary  float-end">沒有帳號? 註冊一個吧</a>
                                        </div>

                                        <div class="col-12">
                                            <button type="submit" class="btn btn-primary px-4 float-end mt-4">送出</button>
                                        </div>
                                   </div>

                                    </div>
                                </div>
                                <div class="col-md-5 ps-0 d-none d-md-block">
                                    <div class="form-right h-100 bg-primary text-white text-center pt-5">
                                        <i class="bi bi-bootstrap"></i>
                                        <h2 class="fs-1">Welcome Back!!!</h2>
                                    </div>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                    <p class="text-end text-secondary mt-3">Bootstrap 5 Login Page Design</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string LinkToken { get; set; }

    bool LoginFail = false;
    bool ShowBind = false;
    string BindUrl = "";
    [Inject]
    AuthenticationStateProvider _authStateProvider { get; set; }
    [Inject]
    NavigationManager _navigationManager { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    private LoginDto Model = new LoginDto();
    private async Task UserLogin()
    {
        Model.UserEmail = Model.UserEmail.Trim();
        var response = await httpClient.PostAsJsonAsync("api/user/login", Model);
        if (!response.IsSuccessStatusCode)
        {
            LoginFail = true;
            return;
        }
        string json = await response.Content.ReadAsStringAsync();
        var result = JsonSerializer.Deserialize<DummyUserDto>(json);
        (_authStateProvider as CustomAuthStateProvider).SetAuthInfo(result);
        if (string.IsNullOrEmpty(LinkToken))
        {
            _navigationManager.NavigateTo("/", true);

        }
        else
        {
            ShowBind = true;
            var nonce = Guid.NewGuid().ToString();
            result.LineNonce = nonce;
            await httpClient.PostAsJsonAsync("api/user/update", result);
            BindUrl = LineBotApiClient.GetAccountLinkUrl(LinkToken, nonce);
        }



    }


}